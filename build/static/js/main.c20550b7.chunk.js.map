{"version":3,"sources":["newForms.js","userTable.js","patientTable.js","appointmentTable.js","dataTables.js","formBody.js","App.js","serviceWorker.js","index.js"],"names":["NewForms","state","values","startDate","Date","submitPatient","submitUser","submitAppointment","_this2","this","type","props","react_default","a","createElement","Fragment","onChange","text","setState","Object","objectSpread","name","placeholder","DOB","sex","onClick","userType","phoneNumber","username","password","es","date","selected","time","location","React","Component","UserTable","react_table_es","columns","data","getTdProps","rowInfo","column","instance","e","handleOriginal","accessor","Header","PatientTable","AppointmentTable","DataTables","fetchedData","fetchData","fetch","then","json","result","_this","console","log","patientTable_PatientTable","patients","appointmentTable_AppointmentTable","appointments","userTable_UserTable","staff","FormBody","_this$props","activity","newForms_NewForms","dataTables_DataTables","FormContext","createContext","App","_this$state","Provider","value","className","formBody_FormBody","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c20550b7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nexport default class NewForms extends React.Component {\r\n    state = {\r\n        values: {\r\n            startDate: new Date()\r\n        },\r\n    }\r\n\r\n    submitPatient = () => {\r\n\r\n    }\r\n\r\n    submitUser = () => {\r\n        \r\n    }\r\n\r\n    submitAppointment = () => {\r\n        \r\n    }\r\n\r\n    render() {\r\n        const {type} = this.props;\r\n        const {values} = this.state;\r\n\r\n        if(!type)\r\n            return null;//don't render if previous fields not selected\r\n\r\n        if(type === \"patients\") {\r\n            return (\r\n                <>\r\n                <h3>\r\n                    Adding a new Patient:\r\n                </h3>\r\n                <form>\r\n                    Name\r\n                    <input onChange={(text) => this.setState({values: {...values, name: text}})}\r\n                    placeholder=\"Name\">\r\n                    </input>\r\n                    DOB\r\n                    <input onChange={(text) => this.setState({values: {...values, DOB: text}})}\r\n                    placeholder=\"MM/DD/YYYY\">\r\n                    </input>\r\n                    Sex\r\n                    <input onChange={(text) => this.setState({values: {...values, sex: text}})}>\r\n                    </input>\r\n                    <br/>\r\n                    <button onClick={this.submitPatient()}>\r\n                        Submit\r\n                    </button>\r\n                </form>\r\n                </>\r\n            )\r\n        }\r\n\r\n        if(type === \"users\") {      \r\n            return (\r\n                <>\r\n                <h3>\r\n                    Adding a new User:\r\n                </h3>\r\n                <form>\r\n                    Name\r\n                    <input onChange={(text) => this.setState({values: {...values, name: text}})}\r\n                    placeholder=\"Name\">\r\n                    </input>\r\n                    <select>\r\n                        <option onChange={() => this.setState({values: {...values, userType: \"staff\"}})}>\r\n                        Staff\r\n                        </option>\r\n                        <option onChange={() => this.setState({values: {...values, userType: \"transporter\"}})}>\r\n                        Transporter\r\n                        </option>\r\n                    </select>\r\n                    Phone Number\r\n                    <input onChange={(text) => this.setState({values: {...values, phoneNumber: text}})}\r\n                    placeholder=\"123-456-7890\">\r\n                    </input>\r\n                    Username\r\n                    <input onChange={(text) => this.setState({values: {...values, username: text}})}>\r\n                    </input>\r\n                        Initial Password(Defaults to 'Password)\r\n                    <input onChange={(text) => this.setState({values: {...values, password: text}})}>\r\n                    </input>\r\n                    <br/>\r\n                    <button onClick={this.submitUser()}>\r\n                        Submit\r\n                    </button>\r\n                </form>\r\n                </>\r\n            )\r\n        }\r\n        \r\n        if(type === \"appointments\") {      \r\n            return (\r\n                <>\r\n                <h3>\r\n                    Adding a new Appointment:\r\n                </h3>\r\n                <form>\r\n                    Date\r\n                    <DatePicker\r\n                    onChange={(date) => this.setState({values: {...values, startDate: date}})}\r\n                    selected={values.startDate}\r\n                    />\r\n                    Time\r\n                    <input onChange={(text) => this.setState({values: {...values, time: text}})}\r\n                    placeholder=\"24:00\">\r\n                    </input>\r\n                    Location\r\n                    <input onChange={(text) => this.setState({values: {...values, location: text}})}>\r\n                    </input>\r\n                    <br/>\r\n                    <button onClick={this.submitPatient()}>\r\n                        Submit\r\n                    </button>\r\n                </form>\r\n                </>\r\n            );    \r\n        }\r\n    }\r\n}","import React from \"react\";\r\nimport ReactTable from \"react-table\";\r\n\r\nexport default class UserTable extends React.Component {\r\n    render() {\r\n        return <ReactTable columns={columns} data={this.props.data} getTdProps={getTdProps}/>\r\n    }\r\n}\r\n\r\n//function passed to react table that determines props such as click handlers\r\nconst getTdProps = (state, rowInfo, column, instance) => {\r\n    return {\r\n        onClick: (e, handleOriginal) => {\r\n\r\n        // triggers default events like expanding SubComponents and pivots.\r\n        if (handleOriginal) {\r\n            handleOriginal();\r\n        }\r\n        }\r\n    };\r\n}\r\n\r\n\r\nconst columns = [\r\n    {\r\n        accessor: \"userName\",\r\n        Header: \"Username\",\r\n    },\r\n    {\r\n        accessor: \"userType\",\r\n        Header: \"Type\",\r\n    },\r\n    {\r\n        accessor: \"fullName\",\r\n        Header: \"Full Name\",\r\n    },\r\n    {\r\n        accessor: \"email\",\r\n        Header: \"Email\",\r\n    },\r\n    {\r\n        accessor: \"phoneNumber\",\r\n        Header: \"Phone Number\",\r\n    }\r\n];","import React from \"react\";\r\nimport ReactTable from \"react-table\";\r\n\r\nexport default class PatientTable extends React.Component {\r\n    render() {\r\n        return <ReactTable columns={columns} data={this.props.data} getTdProps={getTdProps}/>\r\n    }\r\n}\r\n\r\n//function passed to react table that determines props such as click handlers\r\nconst getTdProps = (state, rowInfo, column, instance) => {\r\n    return {\r\n        onClick: (e, handleOriginal) => {\r\n\r\n        // triggers default events like expanding SubComponents and pivots.\r\n        if (handleOriginal) {\r\n            handleOriginal();\r\n        }\r\n        }\r\n    };\r\n}\r\n\r\nconst columns = [\r\n    {\r\n        accessor: \"name\",\r\n        Header: \"Name\",\r\n    },\r\n    {\r\n        accessor: \"sex\",\r\n        Header: \"Sex\",\r\n    },\r\n    {\r\n        accessor: \"DOB\",\r\n        Header: \"DOB\",\r\n    },\r\n];","import React from \"react\";\r\nimport ReactTable from \"react-table\";\r\n\r\nexport default class AppointmentTable extends React.Component {\r\n    render() {\r\n        return <ReactTable columns={columns} data={this.props.data} getTdProps={getTdProps}/>\r\n    }\r\n}\r\n\r\n//function passed to react table that determines props such as click handlers\r\nconst getTdProps = (state, rowInfo, column, instance) => {\r\n    return {\r\n        onClick: (e, handleOriginal) => {\r\n\r\n        // triggers default events like expanding SubComponents and pivots.\r\n        if (handleOriginal) {\r\n            handleOriginal();\r\n        }\r\n        }\r\n    };\r\n}\r\n\r\nconst columns = [\r\n    {\r\n        accessor: \"ID\",\r\n        Header: \"id\",\r\n    },\r\n    {\r\n        accessor: \"location\",\r\n        Header: \"Location\",\r\n    },\r\n    {\r\n        accessor: \"date\",\r\n        Header: \"Time\",\r\n    },\r\n];","import React from \"react\";\r\nimport UserTable from \"./userTable\";\r\nimport PatientTable from \"./patientTable\";\r\nimport AppointmentTable from \"./appointmentTable\";\r\n\r\nimport \"react-table/react-table.css\"\r\n\r\nexport default class DataTables extends React.Component {\r\n    state = {\r\n        fetchedData: []\r\n    }\r\n    componentDidMount() {\r\n        this.fetchData();\r\n    }\r\n\r\n    fetchData = () => {\r\n        const url = \"https://ich20wj3w4.execute-api.us-west-1.amazonaws.com/table\";\r\n        fetch(url)\r\n        .then(data=>{return data.json()})\r\n        .then(result => {\r\n            this.setState({fetchedData: result});\r\n            console.log(result);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {fetchedData} = this.state;\r\n        const {type} = this.props;\r\n\r\n        if(!fetchedData) {\r\n            return null;\r\n        }\r\n\r\n            return (\r\n                <div>\r\n                    {type === \"patients\" ? <PatientTable data={fetchedData.patients}/> :\r\n                    type === \"appointments\" ? <AppointmentTable data={fetchedData.appointments}/> :\r\n                    <UserTable data={fetchedData.staff}/>}\r\n                </div>\r\n            );\r\n        }\r\n    }","import React from \"react\";\r\nimport NewForms from \"./newForms\";\r\nimport DataTables from \"./dataTables\";\r\n\r\nexport default class FormBody extends React.Component {\r\n    render() {\r\n        const {type, activity} = this.props;\r\n\r\n        if(!type || !activity) {\r\n            return null;//don't render if previous fields not selected\r\n        }\r\n\r\n        if(activity === \"new\") {\r\n            return (\r\n                <NewForms type={type} />\r\n            )\r\n        }\r\n        \r\n\r\n        return (\r\n            <>\r\n                <DataTables type={type} />\r\n            </>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport FormBody from \"./formBody\";\r\n\r\nconst FormContext = React.createContext();\r\n\r\nclass App extends Component {\r\n  state = {\r\n    activity: null,\r\n    type: null,\r\n  }\r\n  render() {\r\n    const {activity, type} = this.state;\r\n    return (\r\n      <FormContext.Provider value={{}}>\r\n        <div className=\"App\">\r\n          <h2>\r\n            I want to:\r\n          </h2>\r\n          <div className=\"buttons\">\r\n            <button onClick={()=>this.setState({activity: \"new\", type: null })}\r\n            className={activity === \"new\"? \"selected\": \"\"}>\r\n            Add New data \r\n            </button>\r\n            <button onClick={()=>this.setState({activity: \"modify\", type: null })}\r\n            className={activity === \"modify\"? \"selected\": \"\"}>\r\n              View Existing Data\r\n            </button>      \r\n          </div>\r\n\r\n          {activity && //only show type options once action is selected\r\n          <div className=\"buttons\">\r\n            <button onClick={()=>this.setState({type: \"users\" })}\r\n            className={type === \"users\"? \"selected\": \"\"}>\r\n              User Accounts\r\n            </button>\r\n            <button onClick={()=>this.setState({type: \"appointments\" })}\r\n            className={type=== \"appointments\"? \"selected\": \"\"}>\r\n              Appointments\r\n            </button>\r\n            <button onClick={()=>this.setState({type: \"patients\" })}\r\n            className={type === \"patients\"? \"selected\": \"\"}>\r\n              Patients\r\n            </button>         \r\n            </div>\r\n          }\r\n\r\n          <FormBody activity={activity} type={type}/>\r\n        </div>\r\n      </FormContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}